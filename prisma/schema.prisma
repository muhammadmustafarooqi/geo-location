// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Note that some adapters may set a maximum length for the String type by default, please ensure your strings are long
// enough when changing adapters.
// See https://www.prisma.io/docs/orm/reference/prisma-schema-reference#string for more information
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

model Rule {
  id                        String           @id @default(uuid())
  shop                      String
  country                   String?
  deliveryTime              String?
  shippingMethod            String?
  message                   String?
  eventName                 String?
  zipCodes                  String?  
  zipCodeType               String?
  startDate                 DateTime?
  endDate                   DateTime?
  createdAt                 DateTime         @default(now())
  updatedAt                 DateTime         @updatedAt
  productRules              ProductRule[]
  collectionRules           CollectionRule[]
  VendorRules               VendorRule[]
  TagRules                  TagRule[]
  pickupAvailable           Boolean          @default(false)
  localDelivery             String?
  messageTranslations       Json?           
  deliveryTimeTranslations  Json?            
  localDeliveryTranslations Json?           
  language                  String?          @default("en") 
}

model ProductRule {
  product              Product @relation(fields: [productId], references: [id])
  rule                 Rule    @relation(fields: [ruleId], references: [id])
  productId            String
  ruleId               String
  excluded             Boolean @default(false)
  notificationsEnabled  Boolean @default(true)
  @@id([ruleId, productId])
}

model CollectionRule {
  collection           Collection @relation(fields: [collectionId], references: [id])
  rule                 Rule       @relation(fields: [ruleId], references: [id])
  collectionId         String
  ruleId               String
  excluded             Boolean    @default(false)
  notificationsEnabled  Boolean    @default(true)
  @@id([ruleId, collectionId])
}

model VendorRule {
  vendor              Vendor @relation(fields: [vendorName], references: [name])
  rule                Rule   @relation(fields: [ruleId], references: [id])
  vendorName          String
  ruleId              String
  excluded            Boolean @default(false)
  notificationsEnabled Boolean @default(true)
  @@id([ruleId, vendorName])
}

model TagRule {
  tag                 Tag    @relation(fields: [tagName], references: [name])
  rule                Rule   @relation(fields: [ruleId], references: [id])
  tagName             String
  ruleId              String
  excluded            Boolean @default(false)
  notificationsEnabled Boolean @default(true)
  @@id([ruleId, tagName])
}

model Product {
  id       String        @id @map("productId")
  shop     String
  title    String
  rules    ProductRule[]
}


model Collection {
  id       String           @id @map("collectionId")
  shop     String
  title    String
  rules    CollectionRule[]
}

model Vendor {
  name    String      @id
  shop    String
  rules   VendorRule[]
}

model Tag {
  name    String   @id
  shop    String
  rules   TagRule[]
}

model NotificationSignup {
  id           String   @id @default(uuid())
  email        String
  productId    String?
  collectionId String?
  country      String
  createdAt    DateTime @default(now())
  notifiedAt   DateTime?
}












